import crypto from 'crypto';
import fs from 'fs';

// Configuration
const TOTAL_KEYS = 2000;
const KEY_LENGTH = 24; // 24 caract√®res pour 6 groupes de 4
const OUTPUT_FILE = 'access_keys.txt';

// Fonction pour g√©n√©rer une cl√© unique
function generateKey() {
  const buffer = crypto.randomBytes(KEY_LENGTH / 2);
  const key = buffer.toString('hex').toUpperCase();
  return key.match(/.{4}/g).join('-'); // Format: XXXX-XXXX-XXXX-XXXX-XXXX-XXXX
}

// Fonction pour g√©n√©rer toutes les cl√©s
function generateAllKeys() {
  console.log('üîë D√©but de la g√©n√©ration des cl√©s...');
  const keys = new Set(); // Utiliser un Set pour √©viter les doublons

  while (keys.size < TOTAL_KEYS) {
    const key = generateKey();
    keys.add(key);
    
    if (keys.size % 100 === 0) {
      console.log(`üìä Progression: ${keys.size}/${TOTAL_KEYS} cl√©s g√©n√©r√©es`);
    }
  }

  // Convertir en tableau et ajouter les num√©ros
  const keysArray = Array.from(keys);
  const formattedKeys = keysArray.map((key, index) => {
    return `${(index + 1).toString().padStart(4, '0')}. ${key}`;
  });

  // Sauvegarder dans un fichier
  fs.writeFileSync(OUTPUT_FILE, formattedKeys.join('\n'));

  console.log(`\n‚úÖ G√©n√©ration termin√©e !`);
  console.log(`üìÅ ${TOTAL_KEYS} cl√©s ont √©t√© sauvegard√©es dans ${OUTPUT_FILE}`);
  
  // Afficher quelques exemples
  console.log('\nüìù Exemples de cl√©s g√©n√©r√©es:');
  for (let i = 0; i < 5; i++) {
    console.log(formattedKeys[i]);
  }
}

// Ex√©cuter la g√©n√©ration
generateAllKeys();